# Name of the workflow
name: AWS EC2 Continuous Deployment

# This workflow is triggered whenever the "Node.js CI" workflow completes successfully.
# Make sure the workflow name "Node.js CI" matches the `name:` field in your CI workflow file.
on:
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed

jobs:
  # The deployment job will only run if the CI workflow was successful.
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # Step 1: Configure AWS credentials, including the session token.
      # This action correctly sets up the environment for subsequent AWS commands.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Send deployment commands via SSM using the official AWS CLI.
      # This is more reliable than third-party actions for credential handling.
      - name: Deploy to EC2 via SSM using AWS CLI
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.AWS_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Triggered by successful 'Node.js CI' workflow run" \
            --parameters '{
              "commands": [
                "set -e",
                "cd /home/ec2-user/your-project-directory",
                "echo \"Starting deployment on EC2...\"",
                "sudo docker-compose down",
                "sudo docker-compose pull",
                "sudo docker-compose up -d --remove-orphans",
                "sudo docker image prune -af",
                "echo \"Deployment successful!\""
              ]
            }'
